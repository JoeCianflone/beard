// Response Flexbox Grid
//-------------------------------------------------------------------------- */
.wrap {
    margin-left: auto;
    margin-right: auto;
    padding-left: $beard-grid-gutter;
    padding-right: $beard-grid-gutter;
}

.wrap--xpad {
    padding-left: 0;
    padding-right: 0;
}

.frame {
    margin-left: -$beard-grid-gutter;
    margin-right: -$beard-grid-gutter;

    // TODO Figure out if we should keep this
    // @include media(md) {
    //   display: flex;
    //   flex-direction: row;
    //   flex-wrap: wrap;
    // }
}

.frame--stay {
    // TODO Figure out if we should keep this
    // @include media(only-sm) {
    //     display: flex;
    // }
}

// Adds the ability to add grids without padding in their blocks
.frame--xpad [class^='blk'] {
    padding-left: 0;
    padding-right: 0;
}

// Blocks
//-------------------------------------------------------------------------- */
%blk-relative {
    position: relative;
}

%blk-padding {
    padding-left: $beard-grid-gutter;
    padding-right: $beard-grid-gutter;
}

// The default column width is 100% divided by the column count
$block-width: 100% / $beard-grid-block-count;

.blk {
    @extend %blk-relative;
    @extend %blk-padding;
    flex-grow: 1;
    flex-basis: 0;
}

// Generate standard sizing helpers
@for $i from 1 through $beard-grid-block-count {
    .blk#{$i} {
        @extend %blk-relative;
        @extend %blk-padding;
        flex-basis: $i * $block-width;
    }
}

// Generate responsive sizing helpers
@each $key, $breakpoint in $breakpoints {
    @for $i from 1 through $beard-grid-block-count {
        .#{$key}-blk#{$i} {
            @extend %blk-relative;
            @extend %blk-padding;
            @include media($key) {
                flex-basis: $i * $block-width;
            }
        }
    }
}

// Offsets, Pushers, and Pullers
//-------------------------------------------------------------------------- */
// Offsets
@for $i from 1 through $beard-grid-block-count {
    .blk--offset#{$i} {
        margin-left: $i * $block-width;
    }
}

// Responsive Offsets
@each $key, $breakpoint in $breakpoints {
    @for $i from 1 through $beard-grid-block-count {
        .#{$key}-blk--offset#{$i} {
            @include media($key) {
                margin-left: $i * $block-width;
            }
        }
    }
}

// Pushers
@for $i from 1 through $beard-grid-block-count {
    .blk--push#{$i} {
        left: $i * $block-width;
    }
}

// Responsive Pushers
@each $key, $breakpoint in $breakpoints {
    @for $i from 1 through $beard-grid-block-count {
        .#{$key}-blk--push#{$i} {
            @include media($key) {
                left: $i * $block-width;
            }
        }
    }
}

// Pullers
@for $i from 1 through $beard-grid-block-count {
    .blk--pull#{$i} {
        right: $i * $block-width;
    }
}

// Responsive Pullers
@each $key, $breakpoint in $breakpoints {
    @for $i from 1 through $beard-grid-block-count {
        .#{$key}-blk--pull#{$i} {
            @include media($key) {
                right: $i * $block-width;
            }
        }
    }
}

// Reordering Helpers
//-------------------------------------------------------------------------- */

// Basic first and Last helpers
.blk--first { order: 0; }
.blk--last { order: 1; }

// Responsive first and last helpers
@each $key, $breakpoint in $breakpoints {
    .#{$key}-blk--first { @include media($key) { order: 0; } }
    .#{$key}-blk--last { @include media($key) { order: 1; } }
}
